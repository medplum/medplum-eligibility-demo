
> medplum-eligibility-demo@4.5.2 build
> npm run build:bots && tsc && vite build


> medplum-eligibility-demo@4.5.2 build:bots
> npm run clean && npm run lint && tsc --project tsconfig-bots.json && node --loader ts-node/esm src/scripts/deploy-bots.ts


> medplum-eligibility-demo@4.5.2 clean
> rimraf dist


> medplum-eligibility-demo@4.5.2 lint
> eslint src/


/home/runner/work/medplum/medplum/examples/medplum-eligibility-demo/src/pages/SearchPage.tsx
  35:7  warning  Error: Calling setState synchronously within an effect can trigger cascading renders

Effects are intended to synchronize state between React and external systems such as manually updating the DOM, state management libraries, or other platform APIs. In general, the body of an effect should do one or both of the following:
* Update external systems with the latest state from React.
* Subscribe for updates from some external system, calling setState in a callback function when external state changes.

Calling setState synchronously within an effect body causes cascading renders that can hurt performance, and is not recommended. (https://react.dev/learn/you-might-not-need-an-effect).

/home/runner/work/medplum/medplum/examples/medplum-eligibility-demo/src/pages/SearchPage.tsx:35:7
  33 |       location.search === formatSearchQuery(populatedSearch)
  34 |     ) {
> 35 |       setSearch(populatedSearch);
     |       ^^^^^^^^^ Avoid calling setState() directly within an effect
  36 |     } else {
  37 |       navigate(`/${populatedSearch.resourceType}${formatSearchQuery(populatedSearch)}`)?.catch(console.error);
  38 |     }  react-hooks/set-state-in-effect

âœ– 1 problem (0 errors, 1 warning)

(node:4676) ExperimentalWarning: `--experimental-loader` may be removed in the future; instead use `register()`:
--import 'data:text/javascript,import { register } from "node:module"; import { pathToFileURL } from "node:url"; register("ts-node/esm", pathToFileURL("./"));'
(Use `node --trace-warnings ...` to show where the warning was created)
[36mvite v7.1.12 [32mbuilding for production...[36m[39m
transforming...
[32mâœ“[39m 6777 modules transformed.
rendering chunks...
computing gzip size...
[2mdist/[22m[32mindex.html                 [39m[1m[2m  0.54 kB[22m[1m[22m[2m â”‚ gzip:   0.34 kB[22m
[2mdist/[22m[2massets/[22m[35mindex-Cw86rUvA.css  [39m[1m[2m217.78 kB[22m[1m[22m[2m â”‚ gzip:  32.17 kB[22m
[2mdist/[22m[2massets/[22m[36mindex-CMck4EjI.js   [39m[1m[33m972.44 kB[39m[22m[2m â”‚ gzip: 291.83 kB[22m
[33m
(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.[39m
[32mâœ“ built in 24.18s[39m
